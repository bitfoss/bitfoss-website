{"version":3,"sources":["components/Page.tsx","pages/Home.tsx","pages/NotFound.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Page","props","className","centerTitle","title","children","Home","NotFound","location","useLocation","pathname","search","hash","to","App","path","exact","component","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+MAQaA,EAAO,SAACC,GACjB,OACI,sBAAKC,UAAU,mCAAf,UACI,oBAAIA,UAAWD,EAAME,YAAc,cAAgB,GAAnD,SAAwDF,EAAMG,QAC9D,uBACCH,EAAMI,aCVNC,EAAO,WAEhB,OACI,cAAC,EAAD,CAAMF,MAAM,UAAZ,SACI,8BACI,0ECJHG,EAAW,WACpB,IAAMC,EAAWC,cAEjB,OACI,cAAC,EAAD,CAAML,MAAM,YAAYD,aAAW,EAAnC,SACI,sBAAKD,UAAU,cAAf,UACI,mFACA,8BACI,sBAAMA,UAAU,cAAhB,SAA+BM,EAASE,WACxC,uBAAMR,UAAU,iBAAhB,UAAkCM,EAASG,OAAQH,EAASI,WAEhE,uCAAS,cAAC,IAAD,CAASC,GAAG,IAAZ,yBAAT,aCiBDC,MA3Bf,WACE,OACE,eAAC,IAAD,WAGE,wBAAQZ,UAAU,qBAAlB,SACE,qBAAKA,UAAU,gBAAf,SACE,oBAAIA,UAAU,MAAd,yBAKJ,sBAAMA,UAAU,iBAAhB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOa,KAAK,IAAIC,OAAK,EAACC,UAAWX,IACjC,cAAC,IAAD,CAAOS,KAAK,IAAIE,UAAWV,SAK/B,wBAAQL,UAAU,mBAAlB,SACE,mBAAGA,UAAU,aAAb,iDCdYgB,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MAAM,2DCfnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,kBCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YElH5BtB,M","file":"static/js/main.d8579f0d.chunk.js","sourcesContent":["import React from 'react';\n\ninterface PageProps {\n    title: string;\n    children?: React.ReactNode;\n    centerTitle?: boolean;\n}\n\nexport const Page = (props: PageProps) => {\n    return (\n        <div className=\"bg-content rounded-lg p-3 shadow\">\n            <h1 className={props.centerTitle ? \"text-center\" : \"\"}>{props.title}</h1>\n            <hr />\n            {props.children}\n        </div>\n    );\n};\n","import React from 'react';\nimport { Page } from '../components/Page';\n\nexport const Home = () => {\n\n    return (\n        <Page title=\"Welcome\">\n            <div>\n                <p>Bitfoss.com is under construction...</p>\n            </div>\n        </Page>\n    );\n};\n","import React from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport { Page } from '../components/Page';\n\nexport const NotFound = () => {\n    const location = useLocation();\n\n    return (\n        <Page title=\"Not found\" centerTitle>\n            <div className=\"text-center\">\n                <p>Sorry, the page you're looking for does not exist.</p>\n                <p>\n                    <span className=\"text-danger\">{location.pathname}</span>\n                    <span className=\"text-secondary\">{location.search}{location.hash}</span>\n                </p>\n                <p>Go to <NavLink to=\"/\">Bitfoss.com</NavLink>.</p>\n            </div>\n        </Page>\n    );\n};\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Home } from './pages/Home';\nimport { NotFound } from './pages/NotFound';\n\nfunction App() {\n  return (\n    <Router>\n\n      {/* Header */}\n      <header className=\"text-center shadow\">\n        <div className=\"bg-theme py-1\">\n          <h1 className=\"m-0\">Bitfoss</h1>\n        </div>\n      </header>\n\n      {/* Main */}\n      <main className=\"container py-3\">\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"*\" component={NotFound} />\n        </Switch>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"text-center py-3\">\n        <p className=\"text-muted\">2020 &copy; All rights reserved</p>\n      </footer>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It\"s the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\nimport \"fontsource-ubuntu\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}